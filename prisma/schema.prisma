// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                    String     @id @default(cuid())
  email                 String     @unique
  name                  String?
  password              String
  phone                 String?
  profileImage          String?
  language              String     @default("en") // en, bn
  currency              String     @default("BDT")
  timezone              String     @default("Asia/Dhaka")
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  // Relations
  incomes               Income[]
  expenses              Expense[]
  bankAccounts          BankAccount[]
  tenants               Tenant[]
  rentPayments          RentPayment[]
  subscriptions         Subscription[]
  reports               Report[]
  settings              UserSettings?
  
  @@index([email])
}

// User Settings
model UserSettings {
  id                    String     @id @default(cuid())
  userId                String     @unique
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  darkMode              Boolean    @default(false)
  emailNotifications    Boolean    @default(true)
  twoFactorEnabled      Boolean    @default(false)
  twoFactorSecret       String?
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

// Income model
model Income {
  id                    String     @id @default(cuid())
  userId                String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title                 String
  description           String?
  amount                Float
  category              String     // salary, freelance, business, investment, other
  source                String?
  date                  DateTime
  isRecurring           Boolean    @default(false)
  recurringFrequency    String?    // monthly, quarterly, yearly
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  @@index([userId])
  @@index([date])
}

// Expense model
model Expense {
  id                    String     @id @default(cuid())
  userId                String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title                 String
  description           String?
  amount                Float
  category              String     // food, transport, utilities, entertainment, healthcare, education, other
  paymentMethod         String     // cash, card, bank_transfer, mobile_banking
  date                  DateTime
  isRecurring           Boolean    @default(false)
  recurringFrequency    String?    // monthly, quarterly, yearly
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  @@index([userId])
  @@index([date])
}

// Bank Account model
model BankAccount {
  id                    String     @id @default(cuid())
  userId                String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  accountName           String
  bankName              String
  accountNumber         String
  accountType           String     // savings, checking, business
  balance               Float      @default(0)
  currency              String     @default("BDT")
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  @@index([userId])
}

// Tenant model (for landlords)
model Tenant {
  id                    String     @id @default(cuid())
  userId                String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name                  String
  email                 String?
  phone                 String?
  address               String?
  rentAmount            Float
  rentDueDate           Int        // day of month (1-31)
  leaseStartDate        DateTime
  leaseEndDate          DateTime?
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  rentPayments          RentPayment[]
  
  @@index([userId])
}

// Rent Payment model
model RentPayment {
  id                    String     @id @default(cuid())
  userId                String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tenantId              String
  tenant                Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  amount                Float
  dueDate               DateTime
  paidDate              DateTime?
  status                String     @default("pending") // pending, paid, overdue
  paymentMethod         String?    // cash, bank_transfer, mobile_banking
  notes                 String?
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  @@index([userId])
  @@index([tenantId])
  @@index([status])
}

// Subscription model
model Subscription {
  id                    String     @id @default(cuid())
  userId                String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  plan                  String     // free, basic, pro, enterprise
  status                String     @default("active") // active, cancelled, expired
  startDate             DateTime
  endDate               DateTime?
  renewalDate           DateTime?
  
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  @@index([userId])
}

// Report model
model Report {
  id                    String     @id @default(cuid())
  userId                String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title                 String
  type                  String     // monthly, quarterly, yearly, custom
  startDate             DateTime
  endDate               DateTime
  format                String     // pdf, excel
  fileUrl               String?
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  @@index([userId])
}
